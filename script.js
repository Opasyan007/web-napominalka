let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
let reminderSound;
let LOGGED_IN = !!window.__LOGGED_IN__; // –º–æ–∂–µ—Ç –ø—Ä–∏–ª–µ—Ç–µ—Ç—å –ø–æ–∑–∂–µ –∏–∑ auth.js

// --- –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å/—Å–∫—Ä—ã–≤–∞—Ç—å UI –∑–∞–¥–∞—á, –µ—Å–ª–∏ –Ω–µ –≤–æ—à–ª–∏ ---
function applyAuthVisibility(loggedIn) {
  LOGGED_IN = loggedIn;

  const filterEl = document.getElementById("statusFilter")?.closest(".form-group");
  const testBtn  = document.querySelector('button[onclick="testSound()"]');
  const list     = document.getElementById("taskList");
  const fab      = document.querySelector(".fab");

  const disp = loggedIn ? "" : "none";

  if (filterEl) filterEl.style.display = disp;
  if (testBtn)  testBtn.style.display  = disp;
  if (fab)      fab.style.display      = disp;

  if (list) {
    if (loggedIn) {
      renderTasks();
    } else {
      list.innerHTML = ""; // –æ—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–¥–µ–ª
    }
  }
}

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===
function addTask() {
  if (!LOGGED_IN) { alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É."); return; }

  const title = document.getElementById('taskTitle').value;
  const deadline = document.getElementById('taskDeadline').value;
  const assignedTo = document.getElementById('assignedTo').value;

  if (!title || !deadline || !assignedTo) {
    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }

  const task = {
    id: Date.now(),
    title,
    deadline,
    assignedTo,
    createdAt: new Date().toLocaleString("ru-RU"),
    status: '–Ω–æ–≤–∞—è'
  };

  tasks.unshift(task);
  localStorage.setItem('tasks', JSON.stringify(tasks));
  renderTasks();

  // –æ—á–∏—Å—Ç–∫–∞
  document.getElementById('taskTitle').value = '';
  document.getElementById('taskDeadline').value = '';
}

// === –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ ===
function renderTasks(filter = "–≤—Å–µ") {
  if (!LOGGED_IN) return; // –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ –≤—Ö–æ–¥–∞

  const list = document.getElementById('taskList');
  list.innerHTML = '';
  const now = new Date();

  tasks
    .filter(task => {
      if (filter === "–≤—Å–µ") return true;
      if (filter === "–∞–∫—Ç–∏–≤–Ω—ã–µ") return task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" && new Date(task.deadline) >= now;
      if (filter === "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ") return task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" && new Date(task.deadline) < now;
      return task.status === filter;
    })
    .forEach(task => {
      const taskCard = document.createElement('div');
      taskCard.className = 'task-card';
      taskCard.innerHTML = `
        <strong>${task.title}</strong><br>
        üìå –°–æ–∑–¥–∞–Ω–æ: ${task.createdAt}<br>
        ‚è≥ –î–µ–¥–ª–∞–π–Ω: ${new Date(task.deadline).toLocaleString("ru-RU")}<br>
        üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${task.assignedTo}<br>
        –°—Ç–∞—Ç—É—Å:
        <select onchange="changeStatus(${task.id}, this.value)">
          <option ${task.status === '–Ω–æ–≤–∞—è' ? 'selected' : ''}>–Ω–æ–≤–∞—è</option>
          <option ${task.status === '–≤ —Ä–∞–±–æ—Ç–µ' ? 'selected' : ''}>–≤ —Ä–∞–±–æ—Ç–µ</option>
          <option ${task.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' ? 'selected' : ''}>–≤—ã–ø–æ–ª–Ω–µ–Ω–∞</option>
        </select>
        <button onclick="deleteTask(${task.id})">–£–¥–∞–ª–∏—Ç—å</button>
      `;

      if (new Date(task.deadline) < now && task.status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞') {
        taskCard.classList.add('overdue');
      }
      list.appendChild(taskCard);
    });
}

// === –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ ===
function changeStatus(id, newStatus) {
  if (!LOGGED_IN) return;
  tasks = tasks.map(task => task.id === id ? { ...task, status: newStatus } : task);
  localStorage.setItem('tasks', JSON.stringify(tasks));
  renderTasks();
}

// === –£–¥–∞–ª–µ–Ω–∏–µ ===
function deleteTask(id) {
  if (!LOGGED_IN) return;
  tasks = tasks.filter(task => task.id !== id);
  localStorage.setItem('tasks', JSON.stringify(tasks));
  renderTasks();
}

// === –§–∏–ª—å—Ç—Ä ===
function filterTasks() {
  if (!LOGGED_IN) return;
  const filter = document.getElementById("statusFilter").value;
  renderTasks(filter);
}

// === –ú–æ–¥–∞–ª–∫–∞ ===
function openModal() {
  if (!LOGGED_IN) { alert("–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏."); return; }
  document.getElementById("taskModal").style.display = "flex";
}
function closeModal() {
  document.getElementById("taskModal").style.display = "none";
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ ===
function checkDeadlines() {
  if (!LOGGED_IN) return;
  const now = new Date();
  tasks.forEach(task => {
    const deadline = new Date(task.deadline);
    const diffMs = deadline - now;

    if (task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞") {
      if (diffMs > 0 && diffMs < 300000) {
        reminderSound.play().catch(()=>{
