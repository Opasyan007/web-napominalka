// script.js ‚Äî –∑–∞–¥–∞—á–∏ + UI, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase
import {
  getAuth,
  setPersistence,
  browserLocalPersistence,
  onAuthStateChanged,
} from "https://www.gstatic.com/firebasejs/10.13.0/firebase-auth.js";

const auth = getAuth();

// ---------- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏ ----------
(async () => {
  try {
    await setPersistence(auth, browserLocalPersistence);
    console.log("[script] persistence set: localStorage");
  } catch (e) {
    console.error("[script] setPersistence error:", e);
  }
})();

// ---------- —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ----------
const authSection     = document.getElementById("authSection");
const statusFilterEl  = document.getElementById("statusFilter");
const taskListEl      = document.getElementById("taskList");
const fabBtn          = document.getElementById("fabAdd") || document.querySelector(".fab");

// ---------- –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) ----------
let tasks = [];
let reminderSound = null;
let deadlinesTimer = null;

function storageKey() {
  const uid = auth.currentUser?.uid || "guest";
  return `tasks_${uid}`;
}
function loadTasks() { tasks = JSON.parse(localStorage.getItem(storageKey())) || []; }
function saveTasks() { localStorage.setItem(storageKey(), JSON.stringify(tasks)); }
function requireAuth() {
  if (!auth.currentUser) { alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É"); return false; }
  return true;
}

// ---------- –ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á ----------
function addTask() {
  if (!requireAuth()) return;

  const titleEl      = document.getElementById('taskTitle');
  const deadlineEl   = document.getElementById('taskDeadline');
  const assignedToEl = document.getElementById('assignedTo');

  const title      = (titleEl?.value || "").trim();
  const deadline   = (deadlineEl?.value || "");
  const assignedTo = (assignedToEl?.value || "").trim();

  if (!title || !deadline || !assignedTo || assignedTo === '–ù–µ –≤—ã–±—Ä–∞–Ω–æ') {
    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }

  const task = {
    id: Date.now(),
    title,
    deadline, // ISO –∏–∑ <input type="datetime-local">
    assignedTo,
    createdAt: new Date().toLocaleString('ru-RU'),
    status: '–Ω–æ–≤–∞—è',
  };

  tasks.unshift(task);
  saveTasks();
  renderTasks();

  if (titleEl) titleEl.value = '';
  if (deadlineEl) deadlineEl.value = '';
}

function renderTasks(filter = '–≤—Å–µ') {
  const now = new Date();
  if (!taskListEl) return;
  taskListEl.innerHTML = '';

  tasks
    .filter(t => {
      if (filter === '–≤—Å–µ') return true;
      if (filter === '–∞–∫—Ç–∏–≤–Ω—ã–µ') return t.status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' && new Date(t.deadline) >= now;
      if (filter === '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ') return t.status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' && new Date(t.deadline) < now;
      return t.status === filter;
    })
    .forEach(t => {
      const card = document.createElement('div');
      card.className = 'task-card';
      card.innerHTML = `
        <strong>${t.title}</strong><br>
        üìå –°–æ–∑–¥–∞–Ω–æ: ${t.createdAt}<br>
        ‚è≥ –î–µ–¥–ª–∞–π–Ω: ${new Date(t.deadline).toLocaleString('ru-RU')}<br>
        üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${t.assignedTo}<br>
        –°—Ç–∞—Ç—É—Å:
        <select onchange="changeStatus(${t.id}, this.value)">
          <option ${t.status === '–Ω–æ–≤–∞—è' ? 'selected' : ''}>–Ω–æ–≤–∞—è</option>
          <option ${t.status === '–≤ —Ä–∞–±–æ—Ç–µ' ? 'selected' : ''}>–≤ —Ä–∞–±–æ—Ç–µ</option>
          <option ${t.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' ? 'selected' : ''}>–≤—ã–ø–æ–ª–Ω–µ–Ω–∞</option>
        </select>
        <button onclick="deleteTask(${t.id})">–£–¥–∞–ª–∏—Ç—å</button>
      `;
      if (new Date(t.deadline) < now && t.status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞') {
        card.classList.add('overdue');
      }
      taskListEl.appendChild(card);
    });
}

function changeStatus(id, status) {
  if (!requireAuth()) return;
  tasks = tasks.map(t => (t.id === id ? { ...t, status } : t));
  saveTasks();
  renderTasks(statusFilterEl?.value ?? '–≤—Å–µ');
}

function deleteTask(id) {
  if (!requireAuth()) return;
  tasks = tasks.filter(t => t.id !== id);
  saveTasks();
  renderTasks(statusFilterEl?.value ?? '–≤—Å–µ');
}

function filterTasks() {
  renderTasks(statusFilterEl.value);
}

// ---------- –º–æ–¥–∞–ª–∫–∞ (–æ–¥–Ω–∞ –≤–µ—Ä—Å–∏—è!) ----------
function openModal() {
  if (!requireAuth()) return;
  const m = document.getElementById('taskModal');
  if (!m) { console.error('#taskModal –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }
  m.style.display = 'flex';
}
function closeModal() {
  const m = document.getElementById('taskModal');
  if (m) m.style.display = 'none';
}

// ---------- –¥–µ–¥–ª–∞–π–Ω—ã + –∑–≤—É–∫ ----------
function checkDeadlines() {
  const now = new Date();
  tasks.forEach(t => {
    if (t.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞') return;
    const dl = new Date(t.deadline);
    const diff = dl - now;
    if (diff > 0 && diff < 5 * 60 * 1000 && reminderSound) {
      reminderSound.play().catch(() => {});
    }
    if (diff <= 0) {
      alert(`‚è∞ –ó–∞–¥–∞—á–∞ "${t.title}" –¥–æ—Å—Ç–∏–≥–ª–∞ –¥–µ–¥–ª–∞–π–Ω–∞!`);
    }
  });
}
function testSound() { reminderSound?.play().catch(() => {}); }

// ---------- DOM –≥–æ—Ç–æ–≤ ----------
document.addEventListener('DOMContentLoaded', () => {
  // –∑–≤—É–∫
  reminderSound = new Audio('sound/mixkit-wrong-answer-fail-notification-946.mp3');
  reminderSound.volume = 1.0;
  document.body.addEventListener('click', () => {
    reminderSound.play().then(() => {
      reminderSound.pause(); reminderSound.currentTime = 0;
    }).catch(() => {});
  }, { once: true });

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú+‚Äù –∏ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª–∫–∏
  fabBtn?.addEventListener('click', openModal);
  document.getElementById('btnSave')?.addEventListener('click', () => { addTask(); closeModal(); });
  document.getElementById('btnCancel')?.addEventListener('click', closeModal);

  // –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä (–ø—É—Å—Ç–æ, –µ—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω)
  renderTasks();
});

// ---------- —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ ----------
onAuthStateChanged(auth, (user) => {
  // –ø—Ä—è—á–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ + –∫–Ω–æ–ø–∫—É ‚Äú+‚Äù
  if (authSection) authSection.style.display = user ? "block" : "block"; // –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ ‚Äî –ø–æ—Å—Ç–∞–≤—å "none" –≤–º–µ—Å—Ç–æ "block"
  if (fabBtn) fabBtn.style.display = user ? "inline-flex" : "none";

  if (user) {
    loadTasks();
    renderTasks(statusFilterEl?.value ?? '–≤—Å–µ');

    if (deadlinesTimer) clearInterval(deadlinesTimer);
    deadlinesTimer = setInterval(() => {
      renderTasks(statusFilterEl?.value ?? '–≤—Å–µ');
      checkDeadlines();
    }, 30000);
  } else {
    if (deadlinesTimer) clearInterval(deadlinesTimer);
    if (taskListEl) taskListEl.innerHTML = "";
  }
});

// ---------- –¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è onclick –≤ HTML ----------
window.openModal    = openModal;
window.closeModal   = closeModal;
window.addTask      = addTask;
window.deleteTask   = deleteTask;
window.changeStatus = changeStatus;
window.filterTasks  = filterTasks;
window.testSound    = testSound;
