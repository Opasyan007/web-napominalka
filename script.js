// ====== –ü–∞–º—è—Ç—å/–¥–∞–Ω–Ω—ã–µ ======
const TASKS_KEY = 'tasks';
const ASSIGNEES_KEY = 'assignees';

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–ª–æ–∂–∏—Ç—Å—è –≤ localStorage, –¥–∞–ª—å—à–µ ‚Äî –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–∞–º–∏)
const DEFAULT_ASSIGNEES = [
  "–ê—Ö–º–µ—Ç–∑—è–Ω–æ–≤ –†.–ò.","–ö—É–∑—å–º–∏–Ω–∞ –ï.–ü.","–ì–∞–ª–∏–º–æ–≤ –ê.–ò.","–°–º–∏—Ä–Ω–æ–≤ –ü.–°.","–®–∞—Ä–∏–ø–æ–≤–∞ –õ.–ù.",
  "–ò–≤–∞–Ω–æ–≤ –ê –í.","–ó–∞–π–Ω—É–ª–ª–∏–Ω –ò.–ú.","–í–∞—Å–∏–ª—å–µ–≤–∞ –ù.–í.","–ú–∏–Ω–Ω–∞—Ö–º–µ—Ç–æ–≤–∞ –ê.–ò.","–°–∞—Ñ–∏–Ω –ë.–†.",
  "–ù–∏–∫–æ–ª–∞–µ–≤–∞ –î.–ê.","–ï–≥–æ—Ä–æ–≤ –ù.–î.","–ú—É—Ö–∞–º–µ—Ç–∑—è–Ω–æ–≤–∞ –î. –†.","–ü–æ–ø–æ–≤ –ú.–ò.","–•–∞—Å–∞–Ω–æ–≤–∞ –ì.–ö."
];

let tasks = JSON.parse(localStorage.getItem(TASKS_KEY)) || [];
let assignees = JSON.parse(localStorage.getItem(ASSIGNEES_KEY)) || DEFAULT_ASSIGNEES.slice();
let reminderSound;

// ====== –£—Ç–∏–ª–∏—Ç—ã ======
function saveTasks(){ localStorage.setItem(TASKS_KEY, JSON.stringify(tasks)); }
function saveAssignees(){ localStorage.setItem(ASSIGNEES_KEY, JSON.stringify(assignees)); }
function isLoggedIn(){ return document.body.classList.contains('logged-in'); }

// ====== –†–µ–Ω–¥–µ—Ä –≤—ã–ø–∞–¥–∞—à–∫–∏ "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π" ======
function renderAssigneeSelect() {
  const sel = document.getElementById('assignedTo');
  if (!sel) return;
  sel.innerHTML = '';
  const optEmpty = new Option('–ù–µ –≤—ã–±—Ä–∞–Ω–æ', '');
  sel.appendChild(optEmpty);
  assignees.forEach(name => sel.appendChild(new Option(name, name)));
}

// ====== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ ======
function openAssigneesModal(){
  renderAssigneesList();
  document.getElementById('assigneesModal').style.display = 'flex';
}
function closeAssigneesModal(){
  document.getElementById('assigneesModal').style.display = 'none';
  renderAssigneeSelect(); // –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

function addAssignee(name) {
  const n = (name || '').trim();
  if (!n) return alert('–í–≤–µ–¥–∏—Ç–µ –§–ò–û');
  // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
  const exists = assignees.some(a => a.replace(/\s+/g,' ').trim().toLowerCase() === n.toLowerCase());
  if (exists) return alert('–¢–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ');
  assignees.push(n);
  saveAssignees();
  renderAssigneesList();
  renderAssigneeSelect();
}

function removeAssigneeByIndex(idx){
  assignees.splice(idx,1);
  saveAssignees();
  renderAssigneesList();
  renderAssigneeSelect();
}

function renderAssigneesList(){
  const box = document.getElementById('assigneesList');
  box.innerHTML = '';
  if (!assignees.length){
    box.innerHTML = '<div class="empty">–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.</div>';
    return;
  }
  assignees.forEach((name, i) => {
    const chip = document.createElement('div');
    chip.className = 'chip';
    chip.innerHTML = `<span>${name}</span><button class="chip-del" data-idx="${i}" title="–£–¥–∞–ª–∏—Ç—å">√ó</button>`;
    box.appendChild(chip);
  });
}

// –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ —á–∏–ø–æ–≤
document.addEventListener('click', (e) => {
  if (e.target && e.target.classList.contains('chip-del')) {
    const idx = +e.target.dataset.idx;
    removeAssigneeByIndex(idx);
  }
});

// –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
document.addEventListener('DOMContentLoaded', () => {
  document.getElementById('btnManageAssignees')?.addEventListener('click', openAssigneesModal);
  document.getElementById('btnAddAssignee')?.addEventListener('click', () => {
    addAssignee(document.getElementById('assigneeInput').value);
    document.getElementById('assigneeInput').value = '';
    document.getElementById('assigneeInput').focus();
  });
});

// ====== –ó–∞–¥–∞—á–∏ ======
function addTask() {
  if (!isLoggedIn()) { alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.'); return; }

  const title = document.getElementById('taskTitle').value.trim();
  const deadline = document.getElementById('taskDeadline').value;
  const assignedTo = document.getElementById('assignedTo').value;

  if (!title || !deadline || !assignedTo) {
    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ');
    return;
  }

  const task = {
    id: Date.now(),
    title,
    deadline,
    assignedTo,
    createdAt: new Date().toLocaleString("ru-RU"),
    status: '–Ω–æ–≤–∞—è'
  };

  tasks.unshift(task);
  saveTasks();
  renderTasks();

  // –æ—á–∏—Å—Ç–∫–∞
  document.getElementById('taskTitle').value = '';
  document.getElementById('taskDeadline').value = '';
  document.getElementById('assignedTo').value = '';
}

function renderTasks(filter = "–≤—Å–µ") {
  const list = document.getElementById('taskList');
  list.innerHTML = '';
  const now = new Date();

  tasks
    .filter(task => {
      if (filter === "–≤—Å–µ") return true;
      if (filter === "–∞–∫—Ç–∏–≤–Ω—ã–µ") return task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" && new Date(task.deadline) >= now;
      if (filter === "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ") return task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" && new Date(task.deadline) < now;
      return task.status === filter;
    })
    .forEach(task => {
      const taskCard = document.createElement('div');
      taskCard.className = 'task-card';
      taskCard.innerHTML = `
        <strong>${task.title}</strong><br>
        üìå –°–æ–∑–¥–∞–Ω–æ: ${task.createdAt}<br>
        ‚è≥ –î–µ–¥–ª–∞–π–Ω: ${new Date(task.deadline).toLocaleString("ru-RU")}<br>
        üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${task.assignedTo}<br>
        –°—Ç–∞—Ç—É—Å:
        <select onchange="changeStatus(${task.id}, this.value)">
          <option ${task.status === '–Ω–æ–≤–∞—è' ? 'selected' : ''}>–Ω–æ–≤–∞—è</option>
          <option ${task.status === '–≤ —Ä–∞–±–æ—Ç–µ' ? 'selected' : ''}>–≤ —Ä–∞–±–æ—Ç–µ</option>
          <option ${task.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' ? 'selected' : ''}>–≤—ã–ø–æ–ª–Ω–µ–Ω–∞</option>
        </select>
        <button onclick="deleteTask(${task.id})">–£–¥–∞–ª–∏—Ç—å</button>
      `;

      if (new Date(task.deadline) < now && task.status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞') {
        taskCard.classList.add('overdue');
      }
      list.appendChild(taskCard);
    });
}

function changeStatus(id, newStatus) {
  tasks = tasks.map(task => task.id === id ? { ...task, status: newStatus } : task);
  saveTasks();
  renderTasks();
}

function deleteTask(id) {
  tasks = tasks.filter(task => task.id !== id);
  saveTasks();
  renderTasks();
}

function filterTasks() {
  const filter = document.getElementById("statusFilter").value;
  renderTasks(filter);
}

// ====== –ú–æ–¥–∞–ª–∫–∏ ======
function openModal() {
  if (!isLoggedIn()) { alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.'); return; }
  document.getElementById("taskModal").style.display = "flex";
}
function closeModal() {
  document.getElementById("taskModal").style.display = "none";
}
function closeAssigneesModal(){
  document.getElementById("assigneesModal").style.display = "none";
}

// ====== –î–µ–¥–ª–∞–π–Ω—ã/–∑–≤—É–∫ ======
function checkDeadlines() {
  if (!isLoggedIn()) return;
  const now = new Date();
  tasks.forEach(task => {
    const deadline = new Date(task.deadline);
    const diffMs = deadline - now;
    if (task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞") {
      if (diffMs > 0 && diffMs < 300000) {
        reminderSound.play().catch(()=>{});
      }
      if (diffMs <= 0) {
        alert(`‚è∞ –ó–∞–¥–∞—á–∞ "${task.title}" –¥–æ—Å—Ç–∏–≥–ª–∞ –¥–µ–¥–ª–∞–π–Ω–∞!`);
      }
    }
  });
}

function testSound() {
  if (!isLoggedIn()) { alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.'); return; }
  reminderSound.play().catch(err => console.log("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:", err));
}

// ====== –°—Ç–∞—Ä—Ç ======
document.addEventListener("DOMContentLoaded", () => {
  // –∑–≤—É–∫
  reminderSound = new Audio("sound/mixkit-wrong-answer-fail-notification-946.mp3");
  reminderSound.volume = 1.0;

  // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö + –≤—ã–ø–∞–¥–∞—à–∫–∞
  saveAssignees();          // –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç –≤ localStorage –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  renderAssigneeSelect();

  renderTasks();
  checkDeadlines();

  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–≤—É–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
  document.body.addEventListener("click", () => {
    reminderSound.play().then(() => {
      reminderSound.pause();
      reminderSound.currentTime = 0;
      console.log("üîä –ó–≤—É–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    }).catch(()=>{});
  }, { once: true });
});

// —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–º–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç auth.js
window.addEventListener('auth-changed', () => {
  renderTasks();
});

// —Ç–∞–π–º–µ—Ä
setInterval(() => {
  renderTasks();
  checkDeadlines();
}, 30000);

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ-—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª (–¥–ª—è inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
window.addTask = addTask;
window.changeStatus = changeStatus;
window.deleteTask = deleteTask;
window.filterTasks = filterTasks;
window.openModal = openModal;
window.closeModal = closeModal;
window.closeAssigneesModal = closeAssigneesModal;
