// ====== –ü–∞–º—è—Ç—å/–¥–∞–Ω–Ω—ã–µ ======
const TASKS_KEY = 'tasks';
const ASSIGNEES_KEY = 'assignees';

const DEFAULT_ASSIGNEES = [
  "–ê—Ö–º–µ—Ç–∑—è–Ω–æ–≤ –†.–ò.","–ö—É–∑—å–º–∏–Ω–∞ –ï.–ü.","–ì–∞–ª–∏–º–æ–≤ –ê.–ò.","–°–º–∏—Ä–Ω–æ–≤ –ü.–°.","–®–∞—Ä–∏–ø–æ–≤–∞ –õ.–ù.",
  "–ò–≤–∞–Ω–æ–≤ –ê –í.","–ó–∞–π–Ω—É–ª–ª–∏–Ω –ò.–ú.","–í–∞—Å–∏–ª—å–µ–≤–∞ –ù.–í.","–ú–∏–Ω–Ω–∞—Ö–º–µ—Ç–æ–≤–∞ –ê.–ò.","–°–∞—Ñ–∏–Ω –ë.–†.",
  "–ù–∏–∫–æ–ª–∞–µ–≤–∞ –î.–ê.","–ï–≥–æ—Ä–æ–≤ –ù.–î.","–ú—É—Ö–∞–º–µ—Ç–∑—è–Ω–æ–≤–∞ –î. –†.","–ü–æ–ø–æ–≤ –ú.–ò.","–•–∞—Å–∞–Ω–æ–≤–∞ –ì.–ö."
];

let tasks = JSON.parse(localStorage.getItem(TASKS_KEY)) || [];
let assignees = JSON.parse(localStorage.getItem(ASSIGNEES_KEY)) || DEFAULT_ASSIGNEES.slice();
let reminderSound;

// ====== –£—Ç–∏–ª–∏—Ç—ã ======
function saveTasks(){ localStorage.setItem(TASKS_KEY, JSON.stringify(tasks)); }
function saveAssignees(){ localStorage.setItem(ASSIGNEES_KEY, JSON.stringify(assignees)); }
function isLoggedIn(){ return window.__loggedIn === true || document.body.classList.contains('logged-in'); }

// ====== –†–µ–Ω–¥–µ—Ä –≤—ã–ø–∞–¥–∞—à–∫–∏ "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π" ======
function renderAssigneeSelect() {
  const sel = document.getElementById('assignedTo');
  if (!sel) return;
  sel.innerHTML = '';
  sel.appendChild(new Option('–ù–µ –≤—ã–±—Ä–∞–Ω–æ', ''));
  assignees.forEach(name => sel.appendChild(new Option(name, name)));
}

// ====== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ ======
function openAssigneesModal(){
  if (!isLoggedIn()) { alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.'); return; }
  renderAssigneesList();
  document.getElementById('assigneesModal').style.display = 'flex';
}
function closeAssigneesModal(){
  document.getElementById('assigneesModal').style.display = 'none';
  renderAssigneeSelect(); // –æ–±–Ω–æ–≤–∏–º —Å–µ–ª–µ–∫—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}
function addAssignee(name) {
  const n = (name || '').trim();
  if (!n) { alert('–í–≤–µ–¥–∏—Ç–µ –§–ò–û'); return; }
  const exists = assignees.some(a => a.replace(/\s+/g,' ').trim().toLowerCase() === n.toLowerCase());
  if (exists) { alert('–¢–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ'); return; }
  assignees.push(n);
  saveAssignees();
  renderAssigneesList();
  renderAssigneeSelect();
}
function removeAssigneeByIndex(idx){
  assignees.splice(idx,1);
  saveAssignees();
  renderAssigneesList();
  renderAssigneeSelect();
}
function renderAssigneesList(){
  const box = document.getElementById('assigneesList');
  box.innerHTML = '';
  if (!assignees.length){
    box.innerHTML = '<div class="empty">–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.</div>';
    return;
  }
  assignees.forEach((name, i) => {
    const chip = document.createElement('div');
    chip.className = 'chip';
    chip.innerHTML = `<span>${name}</span><button class="chip-del" data-idx="${i}" title="–£–¥–∞–ª–∏—Ç—å">√ó</button>`;
    box.appendChild(chip);
  });
}

// –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–∞ –ø–æ ¬´–∫—Ä–µ—Å—Ç–∏–∫—É¬ª —É —á–∏–ø–∞
document.addEventListener('click', (e) => {
  if (e.target && e.target.classList.contains('chip-del')) {
    const idx = +e.target.dataset.idx;
    removeAssigneeByIndex(idx);
  }
});

// ====== –ó–∞–¥–∞—á–∏ ======
function addTask() {
  if (!isLoggedIn()) { alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.'); return false; }

  const title = document.getElementById('taskTitle').value.trim();
  const deadline = document.getElementById('taskDeadline').value;
  const assignedTo = document.getElementById('assignedTo').value;

  if (!title || !deadline || !assignedTo) {
    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ');
    return false;
  }

  const task = {
    id: Date.now(),
    title,
    deadline,
    assignedTo,
    createdAt: new Date().toLocaleString("ru-RU"),
    status: '–Ω–æ–≤–∞—è'
  };

  tasks.unshift(task);
  saveTasks();
  renderTasks();

  // –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  document.getElementById('taskTitle').value = '';
  document.getElementById('taskDeadline').value = '';
  document.getElementById('assignedTo').value = '';

  return true;
}

function renderTasks(filter = "–≤—Å–µ") {
  const list = document.getElementById('taskList');
  list.innerHTML = '';
  const now = new Date();

  tasks
    .filter(task => {
      if (filter === "–≤—Å–µ") return true;
      if (filter === "–∞–∫—Ç–∏–≤–Ω—ã–µ") return task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" && new Date(task.deadline) >= now;
      if (filter === "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ") return task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" && new Date(task.deadline) < now;
      return task.status === filter;
    })
    .forEach(task => {
      const taskCard = document.createElement('div');
      taskCard.className = 'task-card';
      taskCard.innerHTML = `
        <strong>${task.title}</strong><br>
        üìå –°–æ–∑–¥–∞–Ω–æ: ${task.createdAt}<br>
        ‚è≥ –î–µ–¥–ª–∞–π–Ω: ${new Date(task.deadline).toLocaleString("ru-RU")}<br>
        üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${task.assignedTo}<br>
        –°—Ç–∞—Ç—É—Å:
        <select onchange="changeStatus(${task.id}, this.value)">
          <option ${task.status === '–Ω–æ–≤–∞—è' ? 'selected' : ''}>–Ω–æ–≤–∞—è</option>
          <option ${task.status === '–≤ —Ä–∞–±–æ—Ç–µ' ? 'selected' : ''}>–≤ —Ä–∞–±–æ—Ç–µ</option>
          <option ${task.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' ? 'selected' : ''}>–≤—ã–ø–æ–ª–Ω–µ–Ω–∞</option>
        </select>
        <button onclick="deleteTask(${task.id})">–£–¥–∞–ª–∏—Ç—å</button>
      `;
      if (new Date(task.deadline) < now && task.status !== '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞') {
        taskCard.classList.add('overdue');
      }
      list.appendChild(taskCard);
    });
}

function changeStatus(id, newStatus) {
  tasks = tasks.map(task => task.id === id ? { ...task, status: newStatus } : task);
  saveTasks();
  renderTasks();
}
function deleteTask(id) {
  tasks = tasks.filter(task => task.id !== id);
  saveTasks();
  renderTasks();
}
function filterTasks() {
  const filter = document.getElementById("statusFilter").value;
  renderTasks(filter);
}

// ====== –ú–æ–¥–∞–ª–∫–∏ (–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞) ======
function openModal() {
  if (!isLoggedIn()) { alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.'); return; }
  document.getElementById("taskModal").style.display = "flex";
}
function closeModal() {
  document.getElementById("taskModal").style.display = "none";
}

// ====== –î–µ–¥–ª–∞–π–Ω—ã/–∑–≤—É–∫ ======
function checkDeadlines() {
  if (!isLoggedIn()) return;
  const now = new Date();
  tasks.forEach(task => {
    const deadline = new Date(task.deadline);
    const diffMs = deadline - now;
    if (task.status !== "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞") {
      if (diffMs > 0 && diffMs < 300000) {
        reminderSound.play().catch(()=>{});
      }
      if (diffMs <= 0) {
        alert(`‚è∞ –ó–∞–¥–∞—á–∞ "${task.title}" –¥–æ—Å—Ç–∏–≥–ª–∞ –¥–µ–¥–ª–∞–π–Ω–∞!`);
      }
    }
  });
}
function testSound() {
  if (!isLoggedIn()) { alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.'); return; }
  reminderSound.play().catch(err => console.log("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:", err));
}

// ====== –°—Ç–∞—Ä—Ç / –ø—Ä–∏–≤—è–∑–∫–∏ ======
document.addEventListener("DOMContentLoaded", () => {
  // –∑–≤—É–∫
  reminderSound = new Audio("sound/mixkit-wrong-answer-fail-notification-946.mp3");
  reminderSound.volume = 1.0;

  // –µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –≤ LS ‚Äî –ø–æ–ª–æ–∂–∏–º –¥–µ—Ñ–æ–ª—Ç
  if (!localStorage.getItem(ASSIGNEES_KEY)) {
    saveAssignees();
  }

  renderAssigneeSelect();
  renderTasks();
  checkDeadlines();

  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–≤—É–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
  document.body.addEventListener("click", () => {
    reminderSound.play().then(() => {
      reminderSound.pause();
      reminderSound.currentTime = 0;
      console.log("üîä –ó–≤—É–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    }).catch(()=>{});
  }, { once: true });

  // ===== –ü—Ä–∏–≤—è–∑–∫–∏ –∫–Ω–æ–ø–æ–∫ / –º–æ–¥–∞–ª–∫–∏
  const btnOpenModal      = document.getElementById('btnOpenModal');
  const btnTaskSave       = document.getElementById('btnTaskSave');
  const btnTaskCancel     = document.getElementById('btnTaskCancel');
  const btnManageAssignees= document.getElementById('btnManageAssignees');
  const btnAddAssignee    = document.getElementById('btnAddAssignee');
  const btnAssigneesDone  = document.getElementById('btnAssigneesDone');

  btnOpenModal?.addEventListener('click', openModal);
  btnTaskSave?.addEventListener('click', () => { if (addTask()) closeModal(); });
  btnTaskCancel?.addEventListener('click', closeModal);

  btnManageAssignees?.addEventListener('click', openAssigneesModal);
  btnAddAssignee?.addEventListener('click', () => {
    addAssignee(document.getElementById('assigneeInput').value);
    document.getElementById('assigneeInput').value = '';
    document.getElementById('assigneeInput').focus();
  });
  // <<< –í–û–¢ –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–õ–û
  btnAssigneesDone?.addEventListener('click', closeAssigneesModal);

  const taskModal      = document.getElementById('taskModal');
  const assigneesModal = document.getElementById('assigneesModal');

  // –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–∫–æ–º –ø–æ —Ñ–æ–Ω—É
  taskModal?.addEventListener('click', (e) => { if (e.target === taskModal) closeModal(); });
  assigneesModal?.addEventListener('click', (e) => { if (e.target === assigneesModal) closeAssigneesModal(); });

  // –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Esc
  window.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (assigneesModal?.style.display === 'flex') closeAssigneesModal();
      else if (taskModal?.style.display === 'flex') closeModal();
    }
  });
});

// —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–º–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç auth.js
window.addEventListener('auth-changed', () => {
  renderTasks();
});

// —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
setInterval(() => {
  renderTasks();
  checkDeadlines();
}, 30000);

// –≠–∫—Å–ø–æ—Ä—Ç (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
window.addTask = addTask;
window.changeStatus = changeStatus;
window.deleteTask = deleteTask;
window.filterTasks = filterTasks;
window.openModal = openModal;
window.closeModal = closeModal;
window.openAssigneesModal = openAssigneesModal;
window.closeAssigneesModal = closeAssigneesModal;
